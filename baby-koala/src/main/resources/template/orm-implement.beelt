package ${koalaTG.packageName}.dao.impl;

import ${koalaTG.packageName}.domian.${koalaTG.pojoName};
import ${koalaTG.packageName}.dao.${koalaTG.pojoName}Dao;
import github.koala.orm.DataBasePool;
import github.koala.orm.conn.DBConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * @author edliao on Auto generate.
 */
public class ${koalaTG.pojoName}DaoImpl implements ${koalaTG.pojoName}Dao{
  <%
    var keyGroup = "";
    var keyGroupInWhere = "";
    var keyNameGroup = "";
    var size = koalaTG.keyClassNames.~size;
    for(var i=0;i<size;i++){
      if(i>0){
        keyGroup =  keyGroup + ",";
        keyNameGroup =  keyNameGroup + ",";
        keyGroupInWhere = keyGroupInWhere + " AND ";
      }
      keyGroup = keyGroup +koalaTG.keyClassNames[i]+" "+koalaTG.keyNames[i];
      keyNameGroup = keyNameGroup + koalaTG.keyNames[i];
      keyGroupInWhere = keyGroupInWhere +koalaTG.keyLabels[i]+"= ?";
    }
  %>

  private static final String SCHEMA_NAME = "${koalaTG.schemaName}";
  private static final String TABLE_NAME = "${koalaTG.tableName}";

  private DBConnection connection = DataBasePool.getDBConnectionBySchema(SCHEMA_NAME);

  //select
  public ${koalaTG.pojoName} selectByKey(${keyGroup}){
    return connection.executeQuery("select * from "+TABLE_NAME+" where ${keyGroupInWhere}",Arrays.asList(${keyNameGroup}),${koalaTG.pojoName}.class);
  }

  public List<${koalaTG.pojoName}> selectAll(){
    return connection.executeQuery("select * from "+TABLE_NAME,null,${koalaTG.pojoName}.class,List.class);
  }

  public List<${koalaTG.pojoName}> selectByExample(${koalaTG.pojoName} example ,Integer pageIndex ,Integer pageSize){
    List<String> whereClause =  new ArrayList<>();
    List<Object> parameters =  new ArrayList<>();
  
    <%
      size = koalaTG.fieldLabels.~size;
      for(var i=0;i<size;i++){
        print("    if(!Objects.isNull(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"())){\n");
        print("      whereClause.add(\""+koalaTG.fieldLabels[i]+"=?\");\n");
        print("      parameters.add(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"());\n");
        print("    }\n");
      }
    %>
  
    return connection.executeQuery("select * from "+ TABLE_NAME +" where 1=1 AND " + String.join(" AND ",whereClause)+" limit "+pageIndex+","+pageSize,parameters,Actor.class,List.class);
  }
  
  //delete
  public int deleteByKey(${keyGroup}){
    return connection.executeUpdate("delete from "+ TABLE_NAME +" where ${keyGroupInWhere}",Arrays.asList(${keyNameGroup}));
  }
  
  public int deleteByExample(${koalaTG.pojoName} example){
    List<String> whereClause =  new ArrayList<>();
    List<Object> parameters =  new ArrayList<>();
  
  <%
    size = koalaTG.fieldLabels.~size;
    for(var i=0;i<size;i++){
      print("    if(!Objects.isNull(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"())){\n");
      print("      whereClause.add(\""+koalaTG.fieldLabels[i]+"=?\");\n");
      print("      parameters.add(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"());\n");
      print("    }\n");
    }
  %>
  
    return connection.executeUpdate("delete from "+ TABLE_NAME +" where 1=1 AND " + String.join(" AND ",whereClause),parameters);
  }
  
  //update
  public int updateByExample(${koalaTG.pojoName} example){
    List<String> setClause = new ArrayList<>();
    List<Object> valueClause = new ArrayList<>();
    
  <%
  var size2 = koalaTG.notKeyLabels.~size;
  for(var i=0;i<size2;i++){
    print("    if(!Objects.isNull(example.get"+koalaTG.notKeyNamesWithUpperCamel[i]+"())){\n");
    print("      setClause.add(\""+koalaTG.notKeyLabels[i]+"=?\");\n");
    print("      valueClause.add(example.get"+koalaTG.notKeyNamesWithUpperCamel[i]+"());\n");
    print("    }\n");
  }
  %>
  
    List<String> whereClause = new ArrayList<>();
  <%
    size3 = koalaTG.keyLabels.~size;
    for(var i=0;i<size3;i++){
      print("    whereClause.add(\""+koalaTG.keyLabels[i]+"=?\");\n");
      print("    valueClause.add(example.get"+koalaTG.keyNamesWithUpperCamel[i]+"());\n");
    }
  %>
    return connection.executeUpdate("update " + TABLE_NAME + " set " + String.join(" , ", setClause) + 
                              " where 1=1 AND" + String.join(" AND ", whereClause), valueClause);
  }
  
  //insert
  public boolean insert(${koalaTG.pojoName} example){
    List<String> setClause = new ArrayList<>();
    List<String> valueClause = new ArrayList<>();
    List<Object> parameters = new ArrayList<>();
    
    <%
      size = koalaTG.fieldLabels.~size;
      for(var i=0;i<size;i++){
        print("     if(!Objects.isNull(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"())){\n");
        print("       setClause.add(\""+koalaTG.fieldLabels[i]+"\");\n");
        print("       valueClause.add(\"?\");\n");
        print("       parameters.add(example.get"+koalaTG.fieldNamesWithUpperCamel[i]+"());\n");
        print("     }\n");
      }
    %>
  
    return connection.executeUpdate(
      "insert into " + TABLE_NAME +" (" +String.join(",", setClause) +") values (" +String.join(",", valueClause) + ")",parameters) == 1 ?
       true : false;
  }
}